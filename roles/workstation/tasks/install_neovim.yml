---
- name: Create the sources directory if it doesn't exist
  ansible.builtin.file:
    path: "{{ sources_dir }}"
    state: directory
    mode: '0755'
  tags: neovim

- name: Check if Neovim is installed
  ansible.builtin.command:
    cmd: nvim --version
  register: neovim_installed
  ignore_errors: true
  changed_when: false
  tags: neovim

- name: Set the installed Neovim version
  ansible.builtin.set_fact:
    installed_neovim_version: "{{ neovim_installed.stdout_lines[0] | regex_search('NVIM v([0-9.]+)', '\\1') | first }}"
  when: neovim_installed.rc == 0
  tags: neovim

- name: Fetch tags and force update if Neovim directory exists
  ansible.builtin.command:
    cmd: git fetch --tags --force
  args:
    chdir: "{{ sources_dir }}/neovim"
  when: neovim_installed.rc == 0
  ignore_errors: true
  changed_when: false
  tags: neovim

- name: Clone the Neovim repository
  ansible.builtin.git:
    repo: "{{ neovim_repo }}"
    dest: "{{ sources_dir }}/neovim"
    version: stable
    update: true
  tags: neovim

- name: Get the latest stable version tag from the Neovim repo
  ansible.builtin.command:
    cmd: git describe --tags --abbrev=0
  args:
    chdir: "{{ sources_dir }}/neovim"
  register: latest_neovim_version
  changed_when: false
  tags: neovim

- name: Remove the leading 'v' from the latest_neovim_version
  ansible.builtin.set_fact:
    latest_neovim_version_clean: "{{ latest_neovim_version.stdout | regex_replace('^v', '') }}"
  tags: neovim

- name: Debug Neovim version comparrison
  ansible.builtin.debug:
    msg:
      - "{{ installed_neovim_version }}"
      - "{{ latest_neovim_version_clean }}"
  when: installed_neovim_version is defined and latest_neovim_version_clean is defined
  tags: neovim

- name: Build Neovim if not installed or version mismatch
  community.general.make:
    chdir: "{{ sources_dir }}/neovim"
    params:
      CMAKE_BUILD_TYPE: Release
  when: installed_neovim_version is not defined or installed_neovim_version != latest_neovim_version_clean
  tags: neovim

- name: Install Neovim
  become: true
  community.general.make:
    chdir: "{{ sources_dir }}/neovim"
    target: install
  when: installed_neovim_version is not defined or installed_neovim_version != latest_neovim_version_clean
  tags: neovim

- name: Install more Neovim dependencies 
  become: true
  ansible.builtin.package:
    name:
      - ripgrep
      - gpg
      - gnupg
      - gpg-agent
  tags: neovim

- name: Install Neovim packer
  ansible.builtin.git:
    repo: "https://github.com/wbthomason/packer.nvim"
    dest: "{{ ansible_env.HOME }}/.local/share/nvim/site/pack/packer/start/packer.nvim"
    depth: 1
    update: true
  tags: neovim

- name: Install Neovim config
  ansible.builtin.git:
    repo: https://github.com/ryanreece/neovim-config.git
    dest: "{{ ansible_env.HOME }}/.config/nvim"
    update: true
  tags: neovim
  
- name: Run :PackerSync in Neovim
  ansible.builtin.command: nvim --headless -c "luafile ~/.config/nvim/lua/reece/packer.lua" -c "so" -c "PackerSync" -c "qa"
  environment:
    XDG_CONFIG_HOME: "{{ ansible_env.HOME }}/.config"
  register: packer_sync_result
  ignore_errors: true
  tags: neovim

- name: Display PackerSync output
  ansible.builtin.debug:
    msg: "{{ packer_sync_result.stdout }}"
  tags: neovim
