---
- name: Install compilation packages
  become: true
  ansible.builtin.package:
    name:
      - build-essential
      - ninja-build
      - gettext
      - cmake
    state: present
  tags: packages

- name: Install python3, pip, and python-is-python3
  become: true
  ansible.builtin.package:
    name:
      - python3
      - python3-pip
      - python-is-python3
    state: present 
  tags: python

- name: Create the sources directory if it doesn't exist
  ansible.builtin.file:
    path: "{{ sources_dir }}"
    state: directory
    mode: '0755'
  tags: neovim

- name: Check if Neovim is installed
  ansible.builtin.command:
    cmd: nvim --version
  register: neovim_installed
  ignore_errors: true
  tags: neovim

- name: Set the installed Neovim version
  ansible.builtin.set_fact:
    installed_neovim_version: "{{ neovim_installed.stdout_lines[0] | regex_search('NVIM v([0-9.]+)', '\\1') | first }}"
  when: neovim_installed.rc == 0
  tags: neovim

- name: Fetch tags and force update if Neovim directory exists
  ansible.builtin.command:
    cmd: git fetch --tags --force
  args:
    chdir: "{{ sources_dir }}/neovim"
  when: neovim_installed.rc == 0
  ignore_errors: true
  tags: neovim

- name: Clone the Neovim repository
  ansible.builtin.git:
    repo: "{{ neovim_repo }}"
    dest: "{{ sources_dir }}/neovim"
    version: stable
    update: true
  tags: neovim

- name: Get the latest stable version tag from the Neovim repo
  ansible.builtin.command:
    cmd: git describe --tags --abbrev=0
  args:
    chdir: "{{ sources_dir }}/neovim"
  register: latest_neovim_version
  tags: neovim

- name: Remove the leading 'v' from the latest_neovim_version
  ansible.builtin.set_fact:
    latest_neovim_version_clean: "{{ latest_neovim_version.stdout | regex_replace('^v', '') }}"
  tags: neovim

- name: Debug Neovim version comparrison
  ansible.builtin.debug:
    msg:
      - "{{ installed_neovim_version }}"
      - "{{ latest_neovim_version_clean }}"
  tags: neovim

- name: Build Neovim if not installed or version mismatch
  community.general.make:
    chdir: "{{ sources_dir }}/neovim"
    params:
      CMAKE_BUILD_TYPE: Release
  when: installed_neovim_version is not defined or installed_neovim_version != latest_neovim_version_clean
  tags: neovim

- name: Install Neovim
  become: true
  community.general.make:
    chdir: "{{ sources_dir }}/neovim"
    target: install
  when: installed_neovim_version is not defined or installed_neovim_version != latest_neovim_version_clean
  tags: neovim

- name: Install more Neovim dependencies 
  become: true
  ansible.builtin.package:
    name:
      - ripgrep
      - gpg
      - gnupg
      - gpg-agent
  tags: neovim

- name: Install Neovim packer
  ansible.builtin.git:
    repo: "https://github.com/wbthomason/packer.nvim"
    dest: "{{ ansible_env.HOME }}/.local/share/nvim/site/pack/packer/start/packer.nvim"
    depth: 1
    update: true
  tags: neovim

- name: Install Neovim config
  ansible.builtin.git:
    repo: https://github.com/ryanreece/neovim-config.git
    dest: "{{ ansible_env.HOME }}/.config/nvim"
    update: true
  tags: neovim
  
- name: Run :PackerSync in Neovim
  ansible.builtin.command: nvim --headless -c "luafile ~/.config/nvim/lua/reece/packer.lua" -c "so" -c "PackerSync" -c "qa"
  environment:
    XDG_CONFIG_HOME: "{{ ansible_env.HOME }}/.config"
  register: packer_sync_result
  ignore_errors: true
  tags: neovim

- name: Display PackerSync output
  ansible.builtin.debug:
    msg: "{{ packer_sync_result.stdout }}"
  tags: neovim

- name: Install dotfiles
  ansible.builtin.git:
    repo: https://github.com/ryanreece/dotfiles.git
    dest: "{{ ansible_env.HOME }}/dotfiles"
    update: true
  tags: dotfiles

- name: Make the install_dotfiles.sh script executable
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/dotfiles/install_dotfiles.sh"
    mode: '0755'
  tags: dotfiles

- name: Run the install_dotfiles.sh script
  ansible.builtin.command:
    cmd: "{{ ansible_env.HOME }}/dotfiles/install_dotfiles.sh"
  args:
    chdir: "{{ ansible_env.HOME }}/dotfiles"
  tags: dotfiles

- name: Install Alacritty
  become: true
  ansible.builtin.package:
    name:
      - alacritty
  tags: alacritty

- name: Find the path of Alacritty
  ansible.builtin.command:
    cmd: which alacritty
  register: alacritty_path
  tags: alacritty

- name: Debug the Alacritty path
  ansible.builtin.debug:
    msg: "Alacritty path is: {{ alacritty_path.stdout }}"
  tags: alacritty

- name: Add Alacritty to update-alternatives
  become: true
  ansible.builtin.command:
    cmd: update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator {{ alacritty_path.stdout }} 50
  tags: alacritty

- name: Set Alacritty as the default terminal
  become: true
  ansible.builtin.command:
    cmd: update-alternatives --set x-terminal-emulator {{ alacritty_path.stdout }}
  tags: alacritty

- name: Install flameshot
  become: true
  ansible.builtin.package:
    name:
      - flameshot
    state: present
  tags: flameshot

- name: Download Regolith GPG key and add to keyring
  become: true
  shell: |
    wget -qO - https://regolith-desktop.org/regolith.key | \
    gpg --dearmor | sudo tee /usr/share/keyrings/regolith-archive-keyring.gpg > /dev/null
  args:
    executable: /bin/bash
  tags: regolith

- name: Add Regolith repository to sources list
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/regolith-archive-keyring.gpg] https://regolith-desktop.org/release-3_2-ubuntu-noble-amd64 noble main"
    filename: regolith
  tags: regolith

- name: Install Regolith desktop and related packages
  become: true
  ansible.builtin.apt:
    name:
      - regolith-desktop
      - regolith-session-flashback
      - regolith-look-lascaille
    state: present
  tags: regolith
